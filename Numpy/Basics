
Numpys are very important in machine learning computations 

Every where we will be using numpys 


System always understand arrays and matrics 

What is an array ? 
[1,2,3,4,5,6]
arrays are datatype just in list in pandas but in terms of numpy we call it as array.

Difference between matrix and array?
Array can have 1 dimention and 2 dimention ....n dimention 
matrix be deafult starts from 2 dimention array.Metrix is also an array


Arrays are  nothing but simple element which is holding dataset  in any dimention 


matrics   -simial to the array.Derived from array class iteself .But it another data type.Matric is always an array and it subclass or child class of an array


import numpy as nd

->nd.array([1,2,3,4,5)]
array([1, 2, 3, 4, 5])

->nd.asanyarray([1,2,3,4,5])

array([1, 2, 3, 4, 5])

->nd.asarray([1,2,3,4,5])
array([1, 2, 3, 4, 5])

Above all three methods returns same thing but there might be slightly difference between them 

Array can have 1 ,2 3,....dimention data

Matrix :

nd.matrix([1,2,3,4,5])
matrix([[1, 2, 3, 4, 5]])

Matrix at any point of have atlease have 2 dimention 



fromfunction(fn,args):
It takes two parameters .One is functions as paramter and another one.
It is used to generate matrixs

   0 1 2
0  T F F
1  F T F
2  F F T

Ex:1
nd.fromfunction(lambda i,j: (i==j),(3,3))
array([[ True, False, False],
       [False,  True, False],
       [False, False,  True]])
      

Ex:2
nd.fromfunction(lambda i,j: (i*j),(4,4))
array([[0., 0., 0., 0.],
       [0., 1., 2., 3.],
       [0., 2., 4., 6.],
       [0., 3., 6., 9.]])

By default numpy when ever we perform some operations it will return values in float types values.If we want interger then we have to use "dtype=int".


dtype=int

nd.fromfunction(lambda i,j: (i*j),(4,4),dtype=int)
array([[0, 0, 0, 0],
       [0, 1, 2, 3],
       [0, 2, 4, 6],
       [0, 3, 6, 9]])
       


(3,4,4) -> meaning 3 matrixs of (4,4) arrays  

nd.fromfunction(lambda i,j,z: (i*j*z),(3,4,4),dtype=int)


array([[[ 0,  0,  0,  0],
        [ 0,  0,  0,  0],
        [ 0,  0,  0,  0],
        [ 0,  0,  0,  0]],

       [[ 0,  0,  0,  0],
        [ 0,  1,  2,  3],
        [ 0,  2,  4,  6],
        [ 0,  3,  6,  9]],

       [[ 0,  0,  0,  0],
        [ 0,  2,  4,  6],
        [ 0,  4,  8, 12],
        [ 0,  6, 12, 18]]])


nd.fromfunction(lambda i,j,z,p: (i*j*z*p),(4,3,2,2),dtype=int)
(4,3,2,2) - >means 4 dimention array of 3  -> (2,2) arrays in bundle 

array([[[[0, 0],
         [0, 0]],

        [[0, 0],
         [0, 0]],

        [[0, 0],
         [0, 0]]],


       [[[0, 0],
         [0, 0]],

        [[0, 0],
         [0, 1]],

        [[0, 0],
         [0, 2]]],


       [[[0, 0],
         [0, 0]],

        [[0, 0],
         [0, 2]],

        [[0, 0],
         [0, 4]]],


       [[[0, 0],
         [0, 0]],

        [[0, 0],
         [0, 3]],

        [[0, 0],
         [0, 6]]]])
 
 
 
===================================================================================================

we have an array If we want find dimention of array 

a.ndim

To find total elements in an array 
a.size

To get dimention and  and array rows and column size

a.shape

To get data types of elemnents of array
a.dtype


Coding Execrice: 

a=nd.fromfunction(lambda i,j,z,p: (i*j*z*p),(4,3,2,2),dtype=int)

a.size
48
a.shape
(4, 3, 2, 2)
a.ndim
4




=========================================================================================================
If I have to prepare data .If we want to prepare use amount of data. 

Question : Try to create an dataframe with 100 number of rows and 100 number columns .In this case how to create 


DataFrame : It is an 2d array .SO we can not push 3 or 4 etc dimention array into dataframe .Means we can not create data frame by using more than 2 dimentional arrays 

If we try to create Data Frame with more than 2 dimention array We will get below error messages 

Ex:
a=nd.fromfunction(lambda i,j,z,p: (i*j*z*p),(4,3,2,2),dtype=int)

pd.createDataFrame(a)

---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
~\AppData\Local\Temp\ipykernel_31416\1615723189.py in <module>
----> 1 pd.createDataFrame(a)

~\Anaconda3\lib\site-packages\pandas\__init__.py in __getattr__(name)
    259         return _SparseArray
    260 
--> 261     raise AttributeError(f"module 'pandas' has no attribute '{name}'")
    262 
    263 

AttributeError: module 'pandas' has no attribute 'createDataFrame'


But We can create DataFrame by using 2 dimentional array 
========================================================
Ex:
a=nd.fromfunction(lambda i,j: (i*j),(2,2),dtype=int)

pd.DataFrame(a)


If some asks to create data frama or dataset with 400 rowns 500 columns ,Yes we can create 

a=nd.fromfunction(lambda i,j: (i*j),(400,500),dtype=int)

And Moreover If they want create data frame with some logic In That case we can some logic in inside lambda .

=======================================================================================================================================

There is another function in numpy to generate random data by using "random" function 

It has 1)random.rand
       2)random.randint(4,50)
       3)random.randn(4,5) 
       
  Exercise Coding:
  ===============
  















 
 
 
